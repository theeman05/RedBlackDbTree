{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>RedBlackDbTree is a tweaked Red-black tree. I have created it because from my knowledge, there isn't any available, efficient method for sorting on Roblox already.</p> <p>If you find any issues, or if something is incorrect, open an issue on GitHub!</p> <p>RedBlackDbTree Time complexity:</p> Function Amortized Worst Case Search O(1) O(1) Add O(1) O(log n) Delete O(1) O(log n)"},{"location":"api-reference/","title":"API Reference","text":""},{"location":"api-reference/#summary","title":"Summary","text":"<p>RedBlackDbTree is a utility module allowing sorting of objects based on their natural order or a given comparator. </p> <p>RedBlackDbTree has a special function called RedBlackDbTree.new() which is used to instantiate a new RedBlackDbTree Instance. This function can take a comparator as a parameter to compare and sort objects by. </p>"},{"location":"api-reference/#methods","title":"Methods","text":"<pre><code>Add(object: any): nil\n</code></pre> <p>\u00a0\u00a0Adds the given object to the tree, if it isn't already in the tree.</p> <pre><code>AddAll(...): nil\n</code></pre> <p>\u00a0\u00a0Adds the given objects to the tree using Add.</p> <pre><code>Remove(object: any): nil\n</code></pre> <p>\u00a0\u00a0Removes the given object from the tree, if it is present in the tree.</p> <pre><code>RemoveAll(...): nil\n</code></pre> <p>\u00a0\u00a0Removes the given objects to the tree using Remove.</p> <pre><code>ContainsObject(object): nil\n</code></pre> <p>\u00a0\u00a0Returns true if the tree contains the given object, false otherwise.</p> <pre><code>UpdateObject(object, dict{[property] = update}): nil\n</code></pre> <p>\u00a0\u00a0Applies the updates given in the dictionary to the object.</p> <pre><code>Clear(): nil\n</code></pre> <p>\u00a0\u00a0Removes all objects from the tree, making it empty.</p> <pre><code>IsEmpty(): nil\n</code></pre> <p>\u00a0\u00a0Returns true if the tree is empty, false otherwise.</p> <pre><code>Height(): number\n</code></pre> <p>\u00a0\u00a0Returns the height of the tree. A one-node tree has height 0.</p> <pre><code>__len(): number\n</code></pre> <p>\u00a0\u00a0Returns the number of non-nil nodes in the tree accesed by the # size operator.</p> <pre><code>Min(): object\n</code></pre> <p>\u00a0\u00a0Returns smallest object in the tree</p> <pre><code>Max(): object\n</code></pre> <p>\u00a0\u00a0Returns largest object in the tree</p> <pre><code>RemoveMin(): nil\n</code></pre> <p>\u00a0\u00a0Removes the smallest object from the tree.</p> <pre><code>RemoveMax(): nil\n</code></pre> <p>\u00a0\u00a0Removes the largest object from the tree.</p> <pre><code>PreOrderArray(): {object}\n</code></pre> <p>\u00a0\u00a0Returns a new array of the tree's objects in pre-order format.</p> <pre><code>InOrderArray(): {object}\n</code></pre> <p>\u00a0\u00a0Returns a new array of the tree's objects in the in-order format.</p> <pre><code>PostOrderArray(): {object}\n</code></pre> <p>\u00a0\u00a0Returns a new array of the tree's objects in post-order format.</p> <pre><code>PreOrderPrint(): nil\n</code></pre> <p>\u00a0\u00a0Prints the tree's objects in pre-order format.</p> <pre><code>InOrderPrint(): nil\n</code></pre> <p>\u00a0\u00a0Prints the tree's objects in the in-order format.</p> <pre><code>PostOrderPrint(): nil\n</code></pre> <p>\u00a0\u00a0Prints the tree's objects in post-order format.</p>"},{"location":"api-reference/#constructors","title":"Constructors","text":""},{"location":"api-reference/#redblackdbtreenew","title":"RedBlackDbTree.new","text":"<p><pre><code>RedBlackDbTree.new() -&gt; RedBlackDBTree\n</code></pre> Creates a new, empty RedBlackDbTree using the natural ordering of its objects. </p> <p>Caution</p> <p>The only objects who may be sorted by the default comparator are Strings, numbers or Metatables with comparison methods.</p> <p><pre><code>RedBlackDbTree.new(comparator: (object1, object2) -&gt; number) -&gt; RedBlackDbTree\n</code></pre> Creates a new, empty RedBlackDbTree, ordered according to the given <code>comparator</code>.</p> <p>The comparator should take two arguments representing the objects passed into it. The main 3 cases are listed below:</p> <ul> <li> <p>If <code>object1</code> is \"smaller\" than <code>object2</code>, a negative number should be returned</p> </li> <li> <p>If <code>object1</code> is \"greater\" than <code>object2</code>, a positive number should be returned</p> </li> <li> <p>If the two objects are considered equal, 0 should be returned</p> </li> </ul>"},{"location":"api-reference/#methods_1","title":"Methods","text":"<p>Info</p> <p><code>self</code> is an active RedBlackDbTree Instance.</p>"},{"location":"api-reference/#add","title":"Add","text":"<p><pre><code>self:Add(object: any)\n</code></pre> Adds <code>object</code> to the tree, given it is not in the array already.</p> <p>Caution</p> <p>If <code>object</code> is mutable, it must be updated using <code>UpdateObject</code>.</p> <p>Alternatively, the object can be removed, updated then added back in.</p>"},{"location":"api-reference/#addall","title":"AddAll","text":"<p><pre><code>self:AddAll(...)\n</code></pre> Adds all the given objects in the tuple <code>...</code></p> <p>If one object is given, it is assumed to be a table in which all values will be added.</p>"},{"location":"api-reference/#remove","title":"Remove","text":"<p><pre><code>self:Remove(object: any)\n</code></pre> Removes <code>object</code> from the tree.</p>"},{"location":"api-reference/#removeall","title":"RemoveAll","text":"<p><pre><code>self:RemoveAll(...)\n</code></pre> Removes all the given objects in the tuple <code>...</code></p> <p>If one object is given, it is assumed to be a table in which all values will be removed.</p>"},{"location":"api-reference/#containsobject","title":"ContainsObject","text":"<p><pre><code>self:ContainsObject(object) -&gt; boolean\n</code></pre> Returns true if the tree contains <code>object</code>, false otherwise.</p>"},{"location":"api-reference/#updateobject","title":"UpdateObject","text":"<pre><code>self:UpdateObject(object, dict: {[property] = update})\n</code></pre> <ul> <li> <p>Removes the <code>object</code> from the tree</p> </li> <li> <p>Applies the <code>update</code> to the <code>property</code> of the <code>object</code> for all properties in <code>dict</code></p> </li> <li> <p>Adds the updated <code>object</code> back into the tree at its correct location</p> </li> </ul> <p>Caution</p> <p>Only mutable objects may be updated this way. An error will be thrown otherwise.</p>"},{"location":"api-reference/#clear","title":"Clear","text":"<p><pre><code>self:Clear()\n</code></pre> Remove all objects from the tree, making it empty.</p>"},{"location":"api-reference/#isempty","title":"IsEmpty","text":"<p><pre><code>self:IsEmpty() -&gt; boolean\n</code></pre> Returns true if the tree is empty, false otherwise.</p>"},{"location":"api-reference/#height","title":"Height","text":"<p><pre><code>self:Height()\n</code></pre> Returns the height of the tree. A one-node tree has height 0.</p>"},{"location":"api-reference/#__len","title":"__len","text":"<p><pre><code>#self -&gt; number\n</code></pre> Returns the number of non-nil nodes in the tree. <code>self</code> should be a RedBlackDbTree instance.</p>"},{"location":"api-reference/#min","title":"Min","text":"<p><pre><code>self:Min() -&gt; object\n</code></pre> Returns the smallest object in the tree.</p> <p>Caution</p> <p>An error will be produced if there are no objects in the tree.</p>"},{"location":"api-reference/#max","title":"Max","text":"<p><pre><code>self:Max() -&gt; object\n</code></pre> Returns the largest object in the tree.</p> <p>Caution</p> <p>An error will be produced if there are no objects in the tree.</p>"},{"location":"api-reference/#removemin","title":"RemoveMin","text":"<p><pre><code>self:RemoveMin()\n</code></pre> Removes the smallest object from the tree.</p> <p>Caution</p> <p>An error will be produced if there are no objects in the tree.</p>"},{"location":"api-reference/#removemax","title":"RemoveMax","text":"<p><pre><code>self:RemoveMax()\n</code></pre> Removes the largest object from the tree</p> <p>Caution</p> <p>An error will be produced if there are no objects in the tree.</p>"},{"location":"api-reference/#preorderarray","title":"PreOrderArray","text":"<p><pre><code>self:PreOrderArray() -&gt; {object}\n</code></pre> Returns a new array of the tree's objects in pre-order format.</p>"},{"location":"api-reference/#inorderarray","title":"InOrderArray","text":"<p><pre><code>self:InOrderArray() -&gt; {object}\n</code></pre> Returns a new array of the tree's objects in the in-order format.</p>"},{"location":"api-reference/#postorderarray","title":"PostOrderArray","text":"<p><pre><code>self:PostOrderArray() -&gt; {object}\n</code></pre> Returns a new array of the tree's objects in post-order format.</p>"},{"location":"api-reference/#preorderprint","title":"PreOrderPrint","text":"<p><pre><code>self:PreOrderPrint()\n</code></pre> Prints the tree's objects in pre-order format.</p>"},{"location":"api-reference/#inorderprint","title":"InOrderPrint","text":"<p><pre><code>self:InOrderPrint()\n</code></pre> Prints the tree's objects in the in-order format.</p>"},{"location":"api-reference/#postorderprint","title":"PostOrderPrint","text":"<p><pre><code>self:PostOrderPrint()\n</code></pre> Prints the tree's objects in post-order format.</p>"},{"location":"guide/array-retrieval/","title":"Array Retrieval","text":"<p>Info</p> <p>Assuming we have already implimented RedBlackDbTree as <code>RedBlackDbTree</code></p>"},{"location":"guide/array-retrieval/#retrieving-the-sorted-array","title":"Retrieving the sorted array:","text":"<pre><code>local result\nlocal tree = RedBlackDbTree.new() -- Instantiate the tree\ntree:AddAll(5,6,8,9,2,1,4,109) -- Add objects into the tree\ntree:AddAll({3,7}) -- We can alternatively add objects like this\ntree:Remove(109) -- Remove an object\nresult = tree:InOrderArray() -- Store the in-order array in `result`\nprint(result) -- print the result\n</code></pre> <p>When you run your game, the following should be printed to the console (you may need to expand the table): <pre><code>{\n    [1] = 1,\n    [2] = 2,\n    [3] = 3,\n    [4] = 4,\n    [5] = 5,\n    [6] = 6,\n    [7] = 7,\n    [8] = 8,\n    [9] = 9\n}\n</code></pre></p>"},{"location":"guide/custom-comparator/","title":"Custom Comparator","text":"<p>Info</p> <p>Assuming we have already implimented RedBlackDbTree as <code>RedBlackDbTree</code></p> <p>In this example, we create a custom comparator which sorts in decending order.</p>"},{"location":"guide/custom-comparator/#create-a-custom-comparator","title":"Create a custom comparator:","text":"<pre><code>local tree\nfunction decOrderComparator(object1, object2)\nif object1 &gt; object2 then\nreturn -1 -- object1 is larger than object2\nelseif object1 &lt; object2 then\nreturn 1  -- object1 is smaller than object2\nelse\nreturn 0  -- object1 is equal to object2\nend\nend\ntree = RedBlackDbTree.new(decOrderComparator) -- Instantiate the tree with the comparator\ntree:AddAll(5,6,8,9,2,1,4,109) -- Add objects into the tree\ntree:AddAll({3,7}) -- We can alternatively add objects like this\ntree:Remove(109) -- Remove an object\ntree:InOrderPrint()\n</code></pre> <p>When you run your game, the following should be printed to the console: <pre><code>9 Color: B\n8 Color: R\n7 Color: B\n6 Color: B\n5 Color: B\n4 Color: B\n3 Color: B\n2 Color: B\n1 Color: B\n</code></pre></p>"},{"location":"guide/implimentation/","title":"Implimentation","text":"<p>Add a new <code>Script</code> object to <code>ServerScriptService</code> in Roblox Studio.</p>"},{"location":"guide/implimentation/#using-method-1","title":"Using Method 1:","text":"<pre><code>local RedBlackDbTree = require(11328824364) -- Impliment the module\n</code></pre>"},{"location":"guide/implimentation/#using-method-2","title":"Using Method 2:","text":"<pre><code>local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal RedBlackDbTree = require(ReplicatedStorage.RedBlackDbTree) -- Impliment the module\n</code></pre> <p>Info</p> <p>Method 2 assumes you've successfuly installed RedBlackDbTree into <code>ReplicatedStorage</code></p>"},{"location":"guide/implimentation/#after-using-a-provided-method","title":"After using a provided method:","text":"<pre><code>local tree = RedBlackDbTree.new() -- Instantiate the tree\ntree:AddAll(5,6,8,9,2,1,4,109) -- Add objects into the tree\ntree:AddAll({3,7}) -- We can alternatively add objects like this\ntree:Remove(109) -- Remove an object\ntree:InOrderPrint()\n</code></pre> <p>When you run your game, the following should be printed to the console: <pre><code>1 Color: B\n2 Color: B\n3 Color: B\n4 Color: B\n5 Color: B\n6 Color: R\n7 Color: B\n8 Color: B\n9 Color: B\n</code></pre></p> <p>Congrats!</p>"},{"location":"guide/installation/","title":"Installation","text":"<p>There are two supported ways to impliment <code>RedBlackDbTree</code> on Roblox.</p> <p>For my examples, <code>RedBlackDbTree</code> will be installed to <code>ReplicatedStorage</code> or accesed via <code>require</code>. The module may be installed anywhere as desired, though.</p>"},{"location":"guide/installation/#method-1-robloxs-built-in-require-method","title":"Method 1: Roblox's built in <code>require</code> method","text":"<ul> <li>Inside your script, you can <code>require</code> the module directly.</li> </ul>"},{"location":"guide/installation/#method-2-model-file-roblox-studio","title":"Method 2: Model File (Roblox Studio)","text":"<ul> <li> <p>Download the rbxm model file from the RedBlackDbTree GitHub</p> </li> <li> <p>Insert the model into Roblox Studio in a place like <code>ReplicatedStorage</code></p> </li> </ul>"},{"location":"guide/mutable-objects/","title":"Mutable Objects","text":"<p>Info</p> <p>Assuming we have already implimented RedBlackDbTree as <code>RedBlackDbTree</code></p> <p>In this example, we use <code>Part</code> objects.</p>"},{"location":"guide/mutable-objects/#utilizing-mutable-objects","title":"Utilizing mutable objects:","text":"<pre><code>local START_POSITION = Vector3.new(-1, 0.5, 18) -- The start position for our parts\nlocal PART_OFFSET = Vector3.new(4, 0, 0)\nlocal removePart, movePart\nlocal tree\nfunction createNewPart(name, position)\nlocal part = Instance.new(\"Part\")\npart.Anchored = true\npart.Position = position\npart.Name = name\npart.Parent = workspace\nreturn part\nend\nfunction partXComparator(part1, part2)\nif part1 == part2 or part1.Position.X == part2.Position.X then\nreturn 0  -- part1 equal to part2 or they have equal X positions\nelseif part1.Position.X &lt; part2.Position.X then\nreturn -1 -- part1 is more left than other\nelse\nreturn 1  -- part1 is more right than other\nend\nend\ntree = RedBlackDbTree.new(partXComparator) -- Instantiate the tree with the comparator\nremovePart = createNewPart(\"REMOVEME\", START_POSITION)\nmovePart = createNewPart(\"MOVEME\", START_POSITION + PART_OFFSET * 2)\ntree:AddAll(createNewPart(\"P1\", START_POSITION), createNewPart(\"P2\", START_POSITION + PART_OFFSET), movePart, removePart) -- Add objects into the tree\ntree:Remove(removePart) -- Remove `removePart`\ntree:UpdateObject(movePart, {Position = START_POSITION - PART_OFFSET}) -- Move `movePart` left of P1\ntree:InOrderPrint()\n</code></pre> <p>When you run your game, the following should be printed to the console: <pre><code>MOVEME Color B\nP1 Color B\nP2 Color B\n</code></pre></p> <p>Since we updated <code>movePart</code> to be left of P1, it is now considered the \"smallest\".</p>"}]}